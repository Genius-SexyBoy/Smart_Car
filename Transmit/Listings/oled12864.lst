C51 COMPILER V9.54   OLED12864                                                             04/29/2018 19:15:19 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OLED12864
OBJECT MODULE PLACED IN .\Objects\oled12864.obj
COMPILER INVOKED BY: D:\keilv5\C51\BIN\C51.EXE Scr\oled12864.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Inc) DEBUG OBJECTEXTEND
                    - PRINT(.\Listings\oled12864.lst) OBJECT(.\Objects\oled12864.obj)

line level    source

   1          /********************************************
   2          OLED屏测试程序-
   3          
   4          
   5          使用说明：
   6          OLED电源使用3.3V。   
   7          ----------------
   8          G    电源地
   9          3.3V 接3.3V电源
  10          SCL   P1.0  
  11          SDA      P1.1
  12          RST  P1.2 
  13          DC   P1.3
  14          ============================================
  15          OLED电源使用5V。   
  16          ----------------
  17          G    电源地
  18          3.3V 接5V电源，电源跟模块之间串接100欧姆电阻，并加3.3V钳位二极管
  19          SCL   P1.0 单片机跟模块之间串接1k-3.3k电阻 
  20          SDA      P1.1 单片机跟模块之间串接1k-3.3k电阻 
  21          RST  P1.2 单片机跟模块之间串接1k-3.3k电阻 
  22          DC   P1.3 单片机跟模块之间串接1k-3.3k电阻     
  23          ============================================     
  24          如果用户使用的是5V单片机，请看用户手册，切勿烧毁模块！ 
  25          *********************************************************/
  26          #include <STC15F2K60S2.H>
  27          
  28          #include "intrins.h"
  29          #include "oled12864.h"
  30           
  31          //sbit LCD_SCL=P5^2;  
  32          //sbit LCD_SDA=P5^3;
  33          //sbit LCD_RST=P0^4; 
  34          //sbit LCD_DC =P0^5; 
  35          
  36          
  37          
  38          #define XLevelL         0x00
  39          #define XLevelH         0x10
  40          #define XLevel          ((XLevelH&0x0F)*16+XLevelL)
  41          #define Max_Column      128
  42          #define Max_Row         64
  43          #define Brightness      0xCF 
  44          
  45          /*
  46          4线SPI使用说明：
  47          VBT 供内部DC-DC电压，3.3~4.3V，如果使用5V电压，为保险起见串一个100~500欧的电阻
  48          VCC 供内部逻辑电压 1.8~6V   
  49          GND 地
  50          
  51          BS0 低电平
  52          BS1 低电平
  53          BS2 低电平
  54          
C51 COMPILER V9.54   OLED12864                                                             04/29/2018 19:15:19 PAGE 2   

  55          CS  片选管脚
  56          DC  命令数据选择管脚
  57          RES 模块复位管脚 
  58          D0（SCLK） ，时钟脚，由MCU控制
  59          D1（MOSI） ，主输出从输入数据脚，由MCU控制
  60          
  61          D2 悬空      
  62          D3-D7 ， 低电平 ， 也可悬空，但最好设为低电平
  63          RD  低电平 ，也可悬空，但最好设为低电平
  64          RW  低电平 ，也可悬空，但最好设为低电平
  65          RD  低电平 ，也可悬空，但最好设为低电平   
  66          */
  67          
  68          #define X_WIDTH 128
  69          #define Y_WIDTH 64
  70          //======================================
  71          
  72          const unsigned char code F6x8[][6] =
  73          {
  74              { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
  75              { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
  76              { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
  77              { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
  78              { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
  79              { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
  80              { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
  81              { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
  82              { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
  83              { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
  84              { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
  85              { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
  86              { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
  87              { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
  88              { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
  89              { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
  90              { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
  91              { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
  92              { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
  93              { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
  94              { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
  95              { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
  96              { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
  97              { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
  98              { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
  99              { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
 100              { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
 101              { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
 102              { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
 103              { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
 104              { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
 105              { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
 106              { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
 107              { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
 108              { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
 109              { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
 110              { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
 111              { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
 112              { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
 113              { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
 114              { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
 115              { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
 116              { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
C51 COMPILER V9.54   OLED12864                                                             04/29/2018 19:15:19 PAGE 3   

 117              { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
 118              { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
 119              { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
 120              { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
 121              { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
 122              { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
 123              { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
 124              { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
 125              { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
 126              { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
 127              { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
 128              { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
 129              { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
 130              { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
 131              { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
 132              { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
 133              { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
 134              { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
 135              { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
 136              { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
 137              { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
 138              { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
 139              { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
 140              { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
 141              { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
 142              { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
 143              { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
 144              { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
 145              { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
 146              { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
 147              { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
 148              { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
 149              { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
 150              { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
 151              { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
 152              { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
 153              { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
 154              { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
 155              { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
 156              { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
 157              { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
 158              { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
 159              { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
 160              { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
 161              { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
 162              { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
 163              { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
 164              { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
 165              { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
 166          };
 167          
 168          
 169          
 170          
 171          void LCD_WrDat(unsigned char dat)
 172          {
 173   1              unsigned char i=8;
 174   1      //      LCD_CS=0;;
 175   1              LCD_DC=1;;
 176   1        LCD_SCL=0;;
 177   1        //;;    
 178   1        while(i--)
C51 COMPILER V9.54   OLED12864                                                             04/29/2018 19:15:19 PAGE 4   

 179   1        {
 180   2          if(dat&0x80){LCD_SDA=1;}
 181   2          else{LCD_SDA=0;}
 182   2          LCD_SCL=1; 
 183   2          ;;;
 184   2                      //;;            
 185   2          LCD_SCL=0;;    
 186   2          dat<<=1;    
 187   2        }
 188   1              //LCD_CS=1;
 189   1      }
 190          void LCD_WrCmd(unsigned char cmd)
 191          {
 192   1              unsigned char i=8;
 193   1              
 194   1              //LCD_CS=0;;
 195   1              LCD_DC=0;;
 196   1        LCD_SCL=0;;
 197   1        //;;   
 198   1        while(i--)
 199   1        {
 200   2          if(cmd&0x80){LCD_SDA=1;}
 201   2          else{LCD_SDA=0;;}
 202   2          LCD_SCL=1;;
 203   2          ;;;
 204   2                      //;;             
 205   2          LCD_SCL=0;;    
 206   2          cmd<<=1;;   
 207   2        }     
 208   1              //LCD_CS=1;
 209   1      }
 210          void LCD_Set_Pos(unsigned char x, unsigned char y)
 211          { 
 212   1        LCD_WrCmd(0xb0+y);
 213   1        LCD_WrCmd(((x&0xf0)>>4)|0x10);
 214   1        LCD_WrCmd((x&0x0f)|0x00); 
 215   1      } 
 216          void LCD_Fill(unsigned char bmp_dat)
 217          {
 218   1              unsigned char y,x;
 219   1              
 220   1              for(y=0;y<8;y++)
 221   1              {
 222   2                      LCD_WrCmd(0xb0+y);
 223   2                      LCD_WrCmd(0x01);
 224   2                      LCD_WrCmd(0x10);
 225   2                      for(x=0;x<X_WIDTH;x++)
 226   2                              LCD_WrDat(bmp_dat);
 227   2              }
 228   1      }
 229          void LCD_CLS(void)
 230          {
 231   1              unsigned char y,x;      
 232   1              for(y=0;y<8;y++)
 233   1              {
 234   2                      LCD_WrCmd(0xb0+y);
 235   2                      LCD_WrCmd(0x01);
 236   2                      LCD_WrCmd(0x10); 
 237   2                      for(x=0;x<X_WIDTH;x++)
 238   2                              LCD_WrDat(0);
 239   2              }
 240   1      }
C51 COMPILER V9.54   OLED12864                                                             04/29/2018 19:15:19 PAGE 5   

 241          void LCD_DLY_ms(unsigned int ms)
 242          {                         
 243   1        unsigned int a;
 244   1        while(ms)
 245   1        {
 246   2          a=1335;
 247   2          while(a--);
 248   2          ms--;
 249   2        }
 250   1        return;
 251   1      } 
 252          void LCD_Init(void)        
 253          {  
 254   1              LCD_SCL=1;
 255   1              //LCD_CS=1;     //预制SLK和SS为高电平   
 256   1              LCD_RST=0;
 257   1              LCD_DLY_ms(50);
 258   1              LCD_RST=1;
 259   1              
 260   1              //从上电到下面开始初始化要有足够的时间，即等待RC复位完毕   
 261   1        
 262   1        LCD_WrCmd(0xae);//--turn off oled panel
 263   1        LCD_WrCmd(0x00);//---set low column address
 264   1        LCD_WrCmd(0x10);//---set high column address
 265   1        LCD_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 266   1        LCD_WrCmd(0x81);//--set contrast control register
 267   1        LCD_WrCmd(0xcf); // Set SEG Output Current Brightness
 268   1        LCD_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 269   1        LCD_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 270   1        LCD_WrCmd(0xa6);//--set normal display
 271   1        LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
 272   1        LCD_WrCmd(0x3f);//--1/64 duty
 273   1        LCD_WrCmd(0xd3);//-set display offset Shift Mapping RAM Counter (0x00~0x3F)
 274   1        LCD_WrCmd(0x00);//-not offset
 275   1        LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
 276   1        LCD_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
 277   1        LCD_WrCmd(0xd9);//--set pre-charge period
 278   1        LCD_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 279   1        LCD_WrCmd(0xda);//--set com pins hardware configuration
 280   1        LCD_WrCmd(0x12);
 281   1        LCD_WrCmd(0xdb);//--set vcomh
 282   1        LCD_WrCmd(0x40);//Set VCOM Deselect Level
 283   1        LCD_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
 284   1        LCD_WrCmd(0x02);//
 285   1        LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
 286   1        LCD_WrCmd(0x14);//--set(0x10) disable
 287   1        LCD_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
 288   1        LCD_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
 289   1        LCD_WrCmd(0xaf);//--turn on oled panel
 290   1        LCD_Fill(0x00);  //初始清屏
 291   1        LCD_Set_Pos(0,0);     
 292   1      } 
 293          
 294          //==============================================================
 295          //函数名：LCD_P6x8Str(unsigned char x,unsigned char y,unsigned char *p)
 296          //功能描述：写入一组标准ASCII字符串
 297          //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
 298          //返回：无
 299          //==============================================================  
 300          void LCD_P6x8Str(unsigned char x,unsigned char y,unsigned char ch[])
 301          {
 302   1        unsigned char c=0,i=0,j=0;      
C51 COMPILER V9.54   OLED12864                                                             04/29/2018 19:15:19 PAGE 6   

 303   1        while (ch[j]!='\0')
 304   1        {    
 305   2          c =ch[j]-32;
 306   2          if(x>126){x=0;y++;}
 307   2          LCD_Set_Pos(x,y);    
 308   2              for(i=0;i<6;i++)     
 309   2                LCD_WrDat(F6x8[c][i]);  
 310   2              x+=6;
 311   2              j++;
 312   2        }
 313   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    443    ----
   CONSTANT SIZE    =    552    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
